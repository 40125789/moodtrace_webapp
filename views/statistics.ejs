<!DOCTYPE html>
<html lang="en">

<head>
    
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Emotion Trends - Mood Trace</title>

    <!-- Bootstrap CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">


<!-- FontAwesome icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"
integrity="correct-fontawesome-integrity-value" crossorigin="anonymous" referrerpolicy="no-referrer" />

<!-- Include Moment.js -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>

<!-- Include Luxon -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/luxon/2.0.2/luxon.min.js"></script>

<!-- Include Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<!-- Include Chart.js adapters for Moment.js and Luxon -->
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-moment@3.1.1/dist/chartjs-adapter-moment.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-luxon"></script>

<!-- Include Chart.js Datalabels plugin -->
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>

<!-- Include jQuery, Popper.js, and Bootstrap JS -->
<link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>

<!--Link to custom style sheet-->
<link rel="stylesheet" href="/styles/style.css" type="text/css">


<!--navbar script-->
<script src="header/navbar.js" defer></script>
<!--navbar template-->
<my-navbar isloggedin="true"></my-navbar>

<style>
    .statistics-body {
        font-family: 'Arial', sans-serif;
        background-color: #f8f9fa;
    }

    .statistics-container {
        margin-top: 10px;
    }

    .statistics-card {
        margin-bottom: 10px;
    }

    .statistics-chart-container {
        height: 300px;
        margin-top: 30px;
    }

    .statistics-insights {
        margin-top: 30px;
    }

    .statistics-insights .statistic-item {
        margin-bottom: 10px;
    }
</style>
</head>
<body class="statistics-body">
<div class="statistics-container">
    <div class="row">
        <div class="col-md-12">
            <div class="statistics-card">
                <div class="statistics-card-body">
                    <h5 class="statistics-card-title">Emotion levels chart</h5>
                    <!-- Canvas element with ID "statistics-chart" -->
                    <canvas id="statistics-chart" width="800" height="400"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Container for statistical insights -->
    <div class="row">
        <div class="col-md-12">
            <div class="statistics-insights" id="statistics-container">
                <!-- Statistical insights will be added here dynamically -->
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', async function () {
    try {
        const response = await fetch('/emotionalValues');
        const data = await response.json();

        // Simplify data processing and filter out invalid entries
        const validData = data.map(entry => ({
            date_time: isValidDate(entry.date_time) ? luxon.DateTime.fromISO(entry.date_time) : null,
            ...entry,
        })).filter(entry => entry.date_time !== null);

        // Check if validData has elements
        if (validData.length === 0) {
            console.error('No valid data after processing.');
            return;
        }

        // Extract emotions from the first entry
        const emotions = Object.keys(validData[0]).filter(key => key !== 'date_time');

        // Define predefined colors for each emotion
        const emotionColors = {
            anger: '#FF5733',
            contempt: '#4682B4',
            disgust: '#FFA500',
            enjoyment: '#800080',
            fear: '#8B4513',
            sadness: '#FFC0CB',
            surprise: '#00FFFF',
        };

        // Create datasets
        const datasets = emotions.map(emotion => ({
            label: emotion,
            borderColor: emotionColors[emotion],
            borderWidth: 2,
            pointRadius: 4,
            fill: false,
            tension: 0.1,
            data: validData.map(entry => ({
                x: entry.date_time !== null ? entry.date_time : null,
                y: entry[emotion],
            })),
        }));

        // Create chart
        const ctx = document.getElementById('statistics-chart').getContext('2d');
        const myChart = new Chart(ctx, {
            type: 'line',
            data: {
                datasets: datasets,
            },
            options: {
                scales: {
                    x: {
                        type: 'time',
                        time: {
                            unit: 'day',
                            displayFormats: {
                                day: 'DDD', // Adjust the date format here
                            },
                            tooltipFormat: 'DDD', // Adjust the tooltip format here
                        },
                        title: {
                            display: true,
                            text: 'Date',
                        },
                    },
                    y: {
                        beginAtZero: true,
                        max: 10,
                        stepSize: 1,
                        title: {
                            display: true,
                            text: 'Emotional Level',
                        },
                    },
                },
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: (context) => {
                                const { datasetIndex, parsed } = context;

                                if (parsed && parsed.y !== undefined) {
                                    return `${emotions[datasetIndex]}: ${parsed.y}`;
                                }

                                return 'Invalid Data';
                            },
                            afterLabel: (context) => {
                    
                                return `Contextual Triggers: ${validData[context.dataIndex].contextual_triggers || 'None'}`;
                            },
                        },
                    },
                    legend: {
                        labels: {
                            boxWidth: 20,
                            fontColor: 'black',
                        },
                    },
                    elements: {
                        point: {
                            pointStyle: 'circle',
                            backgroundColor: 'white',
                            borderColor: 'black',
                            borderWidth: 1,
                            radius: 3,
                        },
                    },
                },
            },
        });

        displayStatistics(validData);

        // Update chart rendering
        myChart.update();
    } catch (error) {
        console.error('Error fetching data:', error);
    }
});

// Function to display statistical insights
function displayStatistics(data) {
    const emotions = Object.keys(data[0]).filter(key => key !== 'date_time');
    const statisticsContainer = document.getElementById('statistics-container');

    emotions.forEach(emotion => {
        const emotionData = data.map(entry => entry[emotion]);
        const mean = calculateMean(emotionData);
        const trend = analyzeTrend(emotionData);

        // Create HTML elements to display statistics
        const statisticElement = document.createElement('div');
        statisticElement.innerHTML = `
            <div class="statistic-item">
                <h4>${emotion}</h4>
                <p>Mean: ${mean}</p>
                <p>Trend: ${trend}</p>
            </div>
        `;
        statisticsContainer.appendChild(statisticElement);
    });
}

// Function to calculate mean
function calculateMean(data) {
    const sum = data.reduce((acc, val) => acc + val, 0);
    return sum / data.length;
}

// Function to analyze trend
function analyzeTrend(data) {
    // Calculate the difference between each adjacent data point
    const differences = [];
    for (let i = 1; i < data.length; i++) {
        differences.push(data[i] - data[i - 1]);
    }

    // Calculate the overall trend based on the average difference
    const averageDifference = differences.reduce((acc, val) => acc + val, 0) / differences.length;
    
    if (averageDifference > 0) {
        return 'Increasing';
    } else if (averageDifference < 0) {
        return 'Decreasing';
    } else {
        return 'Stable';
    }
}



// Function to check if a date string is valid
function isValidDate(dateString) {
    return luxon.DateTime.fromISO(dateString).isValid;
}
</script>
</body>
</html>